
 public class HelloWorld { public HelloWorld();  aload_0 invokespecial return  public static void main(java.lang.String[]);  getstatic ldc invokevirtual return }.
 public class HelloWorld { public static void main(String[] args) { System.out.println("Hello World!"); } }.
 public class CallingMethodsInSameCls { public CallingMethodsInSameCls();  aload_0 invokespecial return  public static void main(java.lang.String[]);  invokestatic invokestatic invokestatic return  public static void printOne();  getstatic ldc invokevirtual return  public static void printTwo();  invokestatic invokestatic return }.
 public class CallingMethodsInSameCls { public static void main(String[] args) { printOne(); printOne(); printTwo(); }  public static void printOne() { System.out.println("Hello World"); }  public static void printTwo() { printOne(); printOne(); } }.
 public class Factorial { public Factorial();  aload_0 invokespecial return  public static void main(java.lang.String[]);  iconst_0 istore_2 iload_2 bipush        100 if_icmpge     46 getstatic new dup invokespecial iload_2 invokevirtual ldc invokevirtual iload_2 invokestatic invokevirtual invokevirtual invokevirtual iinc          2, 1 goto          2 return  public static int factorial(int);  iconst_1 istore_1 iconst_2 istore_2 iload_2 iload_0 if_icmpgt     19 iload_1 iload_2 imul istore_1 iinc          2, 1 goto          4 iload_1 ireturn }.
 public class Factorial { public static void main(String[] args) {	final int NUM_FACTS = 100; for(int i = 0; i < NUM_FACTS; i++) System.out.println( i + "! is " + factorial(i)); }  public static int factorial(int n) {	int result = 1; for(int i = 2; i <= n; i++) result *= i; return result; } }.
 public class EnhancedFor { public EnhancedFor();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        10 newarray       int dup iconst_0 iconst_1 iastore dup iconst_1 iconst_2 iastore dup iconst_2 iconst_3 iastore dup iconst_3 iconst_4 iastore dup iconst_4 iconst_5 iastore dup iconst_5 bipush        6 iastore dup bipush        6 bipush        7 iastore dup bipush        7 bipush        8 iastore dup bipush        8 bipush        9 iastore dup bipush        9 bipush        10 iastore astore_1 aload_1 invokestatic istore_2 getstatic new dup invokespecial ldc invokevirtual iload_2 invokevirtual invokevirtual invokevirtual getstatic ldc invokevirtual aload_1 invokestatic getstatic ldc invokevirtual aload_1 invokestatic getstatic ldc invokevirtual aload_1 invokestatic getstatic ldc invokevirtual aload_1 invokestatic getstatic ldc invokevirtual aload_1 invokestatic return  public static int sumListEnhanced(int[]);  iconst_0 istore_1 aload_0 astore_2 aload_2 arraylength istore_3 iconst_0 istore        4 iload         4 iload_3 if_icmpge     33 aload_2 iload         4 iaload istore        5 iload_1 iload         5 iadd istore_1 iinc          4, 1 goto          10 iload_1 ireturn  public static int sumListOld(int[]);  iconst_0 istore_1 iconst_0 istore_2 iload_2 aload_0 arraylength if_icmpge     31 iload_1 aload_0 iload_2 iaload iadd istore_1 getstatic aload_0 iload_2 iaload invokevirtual iinc          2, 1 goto          4 iload_1 ireturn  public static void addOneError(int[]);  aload_0 astore_1 aload_1 arraylength istore_2 iconst_0 istore_3 iload_3 iload_2 if_icmpge     29 aload_1 iload_3 iaload istore        4 iload         4 iconst_1 iadd istore        4 iinc          3, 1 goto          7 return  public static void addOne(int[]);  iconst_0 istore_1 iload_1 aload_0 arraylength if_icmpge     21 aload_0 iload_1 dup2 iaload iconst_1 iadd iastore iinc          1, 1 goto          2 return  public static void printList(int[]);  getstatic ldc invokevirtual iconst_0 istore_1 iload_1 aload_0 arraylength if_icmpge     53 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual aload_0 iload_1 iaload invokevirtual invokevirtual invokevirtual iinc          1, 1 goto          10 return }.
 public class EnhancedFor { public static void main(String[] args) {	int[] list ={1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; int sum = sumListEnhanced(list); System.out.println("Sum of elements in list: " + sum);  System.out.println("Original List"); printList(list); System.out.println("Calling addOne"); addOne(list); System.out.println("List after call to addOne"); printList(list); System.out.println("Calling addOneError"); addOneError(list); System.out.println("List after call to addOneError. Note elements of list did not change."); printList(list); } public static int sumListEnhanced(int[] list) {	int total = 0; for(int val : list) {	total += val; } return total; } public static int sumListOld(int[] list) {	int total = 0; for(int i = 0; i < list.length; i++) {	total += list[i]; System.out.println( list[i] ); } return total; } public static void addOneError(int[] list) {	for(int val : list) {	val = val + 1; } } public static void addOne(int[] list) {	for(int i = 0; i < list.length; i++) {	list[i]++; } }  public static void printList(int[] list) {	System.out.println("index, value"); for(int i = 0; i < list.length; i++) {	System.out.println(i + ", " + list[i]); } } }.
 public class Foo { public Foo();  aload_0 invokespecial return  public static void main(java.lang.String[]);  getstatic ldc invokevirtual invokestatic invokestatic return  public static void a();  getstatic ldc invokevirtual return  public static void b();  getstatic ldc invokevirtual return }.
 public class Foo { public static void main(final String[] args) { System.out.println("This is a simple example of decompilation using javap"); a(); b(); }  public static void a() { System.out.println("Now we are calling a function..."); }  public static void b() { System.out.println("...and now we are calling b"); } }.
 public class CompareStrings { public CompareStrings();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 ldc astore_2 aload_1 aload_2 if_acmpne     22 getstatic ldc invokevirtual goto          30 getstatic ldc invokevirtual return }.
 public class CompareStrings { public static void main(String[] args) { String style = "Bold"; String style2 = "Bold"; if(style == style2) System.out.println("Equal"); else System.out.println("Not Equal"); } }.
 public class power { public power();  aload_0 invokespecial return  public static void main(java.lang.String[]);  iconst_1 istore_1 iconst_2 istore_2 iload_1 iload_2 invokestatic istore_3 return  static int calc(int, int);  iload_0 i2d ldc2_w invokestatic iload_1 i2d ldc2_w invokestatic dadd invokestatic d2i ireturn }.
 public class power { public static void main(String[] args) { int a = 1; int b = 2; int c = calc(a, b); } static int calc(int a, int b) { return (int) Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)); } }.
 public class StringExample { public StringExample();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 sipush        307 istore_2 new dup invokespecial aload_1 invokevirtual ldc invokevirtual iload_2 invokevirtual invokevirtual astore_3 aload_3 bipush        10 bipush        17 invokevirtual astore        4 ldc astore        5 new dup invokespecial aload_3 invokevirtual aload         5 invokevirtual invokevirtual astore        6 getstatic new dup invokespecial ldc invokevirtual aload_1 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_3 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload         4 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload         5 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload         6 invokevirtual invokevirtual invokevirtual iconst_3 istore_2 iconst_5 istore        7 new dup invokespecial iload_2 iload         7 iadd invokevirtual ldc invokevirtual invokevirtual astore        8 new dup invokespecial ldc invokevirtual iload_2 invokevirtual iload         7 invokevirtual invokevirtual astore        9 new dup invokespecial ldc invokevirtual iload_2 invokevirtual iload         7 invokevirtual ldc invokevirtual invokevirtual astore        10 getstatic new dup invokespecial ldc invokevirtual aload         8 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload         9 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload         10 invokevirtual invokevirtual invokevirtual return }.
 public class StringExample {	public static void main(String[] args) {	String s1 = "Computer Science"; int x = 307; String s2 = s1 + " " + x; String s3 = s2.substring(10,17); String s4 = "is fun"; String s5 = s2 + s4; System.out.println("s1: " + s1); System.out.println("s2: " + s2); System.out.println("s3: " + s3); System.out.println("s4: " + s4); System.out.println("s5: " + s5); x = 3; int y = 5; String s6 = x + y + "total"; String s7 = "total " + x + y; String s8 = " " + x + y + "total"; System.out.println("s6: " + s6); System.out.println("s7: " + s7); System.out.println("s8: " + s8); } }.
 public class BinaryConverter { static final boolean $assertionsDisabled;  public BinaryConverter();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        -5 istore_1 iload_1 bipush        33 if_icmpge     86 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual iload_1 invokestatic invokevirtual invokevirtual invokevirtual getstatic iload_1 invokevirtual getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual iload_1 invokestatic invokevirtual invokevirtual invokevirtual iinc          1, 1 goto          3 return  public static java.lang.String toBinary(int);  iload_0 ifge          8 iconst_1 goto          9 iconst_0 istore_1 iload_0 invokestatic istore_0 ldc astore_2 iload_0 iconst_1 if_icmple     51 new dup invokespecial iload_0 iconst_2 irem invokevirtual aload_2 invokevirtual invokevirtual astore_2 iload_0 iconst_2 idiv istore_0 goto          18 getstatic ifne          93 iload_0 ifeq          93 iload_0 iconst_1 if_icmpeq     93 new dup new dup invokespecial ldc invokevirtual iload_0 invokevirtual invokevirtual invokespecial athrow new dup invokespecial iload_0 invokevirtual aload_2 invokevirtual invokevirtual astore_2 getstatic ifne          133 aload_2 invokestatic ifne          133 new dup invokespecial athrow iload_1 ifeq          157 new dup invokespecial ldc invokevirtual aload_2 invokevirtual invokevirtual astore_2 aload_2 areturn  public static boolean all0sAnd1s(java.lang.String);  getstatic ifne          20 aload_0 ifnonnull     20 new dup ldc invokespecial athrow iconst_1 istore_1 iconst_0 istore_2 iload_1 ifeq          66 iload_2 aload_0 invokevirtual if_icmpge     66 aload_0 iload_2 invokevirtual istore_3 iload_3 bipush        48 if_icmpeq     54 iload_3 bipush        49 if_icmpne     58 iconst_1 goto          59 iconst_0 istore_1 iinc          2, 1 goto          24 iload_1 ireturn  static {};  ldc invokevirtual ifne          12 iconst_1 goto          13 iconst_0 putstatic return }.
 public class BinaryConverter { public static void main(String[] args){ for(int i = -5; i < 33; i++){ System.out.println(i + ": " + toBinary(i)); System.out.println(i); //always another way System.out.println(i + ": " + Integer.toBinaryString(i)); } } public static String toBinary(int base10Num){ boolean isNeg = base10Num < 0; base10Num = Math.abs(base10Num); String result = "";  while(base10Num > 1){ result = (base10Num % 2) + result; base10Num /= 2; } assert base10Num == 0 || base10Num == 1 : "value is not <= 1: " + base10Num;  result = base10Num + result; assert all0sAnd1s(result);  if( isNeg ) result = "-" + result; return result; } public static boolean all0sAnd1s(String val){ assert val != null : "Failed precondition all0sAnd1s. parameter cannot be null"; boolean all = true; int i = 0; char c;  while(all && i < val.length()){ c = val.charAt(i); all = c == '0' || c == '1'; i++; } return all; } }.
 public class Numeric { public Numeric();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 iconst_1 istore_2 aload_1 invokestatic invokestatic astore_3 goto          19 astore_3 iconst_0 istore_2 iload_2 ifeq          51 getstatic new dup invokespecial aload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          76 getstatic new dup invokespecial aload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual return  from    to  target type 5    13    16   Class java/lang/NumberFormatException }.
 public class Numeric { public static void main(String[] args) { String string = "12345.15"; boolean numeric = true; try { Double num = Double.parseDouble(string); } catch (NumberFormatException e) { numeric = false; } if(numeric) System.out.println(string + " is a number"); else System.out.println(string + " is not a number"); } }.
 public class ObjectVarsAsParameters { public ObjectVarsAsParameters();  aload_0 invokespecial return  public static void main(java.lang.String[]);  invokestatic return  public static void go();  new dup iconst_0 iconst_0 iconst_5 iconst_5 invokespecial astore_0 getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual aload_0 bipush        10 bipush        15 invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual aload_0 invokestatic getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual aload_0 invokestatic getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual return  public static void alterPointee(java.awt.Rectangle);  getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual aload_0 bipush        20 bipush        30 invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual return  public static void alterPointer(java.awt.Rectangle);  getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual new dup iconst_5 bipush        10 bipush        30 bipush        35 invokespecial astore_0 getstatic new dup invokespecial ldc invokevirtual aload_0 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 import java.awt.Rectangle; public class ObjectVarsAsParameters {	public static void main(String[] args) {	go(); } public static void go() {	Rectangle r1 = new Rectangle(0,0,5,5); System.out.println("In method go. r1 " + r1 + "\n"); r1.setSize(10, 15); System.out.println("In method go. r1 " + r1 + "\n"); alterPointee(r1); System.out.println("In method go. r1 " + r1 + "\n"); alterPointer(r1); System.out.println("In method go. r1 " + r1 + "\n"); }  public static void alterPointee(Rectangle r) {	System.out.println("In method alterPointee. r " + r + "\n"); r.setSize(20, 30); System.out.println("In method alterPointee. r " + r + "\n"); } public static void alterPointer(Rectangle r) {	System.out.println("In method alterPointer. r " + r + "\n"); r = new Rectangle(5, 10, 30, 35); System.out.println("In method alterPointer. r " + r + "\n"); } }.
 public class ArrayExamples { static final boolean $assertionsDisabled;  public ArrayExamples();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        7 newarray       int dup iconst_0 iconst_1 iastore dup iconst_1 iconst_2 iastore dup iconst_2 iconst_3 iastore dup iconst_3 iconst_4 iastore dup iconst_4 iconst_1 iastore dup iconst_5 iconst_2 iastore dup bipush        6 iconst_3 iastore astore_1 aload_1 iconst_5 invokestatic aload_1 invokestatic aload_1 invokestatic bipush        11 newarray       int dup iconst_0 iconst_1 iastore dup iconst_1 iconst_2 iastore dup iconst_2 iconst_3 iastore dup iconst_3 iconst_4 iastore dup iconst_4 iconst_5 iastore dup iconst_5 bipush        6 iastore dup bipush        6 bipush        7 iastore dup bipush        7 bipush        8 iastore dup bipush        8 bipush        9 iastore dup bipush        9 bipush        10 iastore dup bipush        10 bipush        11 iastore astore_1 aload_1 invokestatic aload_1 invokestatic bipush        14 newarray       int dup iconst_0 bipush        11 iastore dup iconst_1 bipush        10 iastore dup iconst_2 bipush        9 iastore dup iconst_3 bipush        8 iastore dup iconst_4 bipush        7 iastore dup iconst_5 bipush        6 iastore dup bipush        6 iconst_5 iastore dup bipush        7 iconst_4 iastore dup bipush        8 iconst_3 iastore dup bipush        9 iconst_2 iastore dup bipush        10 iconst_1 iastore dup bipush        11 iconst_0 iastore dup bipush        12 iconst_m1 iastore dup bipush        13 bipush        -2 iastore astore_1 aload_1 invokestatic aload_1 invokestatic iconst_1 newarray       int dup iconst_0 iconst_1 iastore astore_1 aload_1 invokestatic aload_1 invokestatic return  public static int findMin(int[]);  getstatic ifne          25 aload_0 ifnull        15 aload_0 arraylength ifgt          25 new dup ldc invokespecial athrow iconst_0 istore_1 iconst_1 istore_2 iload_2 aload_0 arraylength if_icmpge     52 aload_0 iload_2 iaload aload_0 iload_1 iaload if_icmpge     46 iload_2 istore_1 iinc          2, 1 goto          29 iload_1 ireturn  public static void badResize(int[], int);  getstatic ifne          24 aload_0 ifnull        14 iload_1 ifge          24 new dup ldc invokespecial athrow iload_1 newarray       int astore_2 aload_0 arraylength iload_1 invokestatic istore_3 iconst_0 istore        4 iload         4 iload_3 if_icmpge     58 aload_2 iload         4 aload_0 iload         4 iaload iastore iinc          4, 1 goto          38 aload_2 astore_0 return  public static int[] goodResize(int[], int);  getstatic ifne          24 aload_0 ifnull        14 iload_1 ifge          24 new dup ldc invokespecial athrow iload_1 newarray       int astore_2 aload_0 arraylength iload_1 invokestatic istore_3 iconst_0 istore        4 iload         4 iload_3 if_icmpge     58 aload_2 iload         4 aload_0 iload         4 iaload iastore iinc          4, 1 goto          38 aload_2 areturn  public static void findAndPrintPairs(int[], int);  getstatic ifne          20 aload_0 ifnonnull     20 new dup ldc invokespecial athrow iconst_0 istore_2 iload_2 aload_0 arraylength if_icmpge     126 iload_2 iconst_1 iadd istore_3 iload_3 aload_0 arraylength if_icmpge     120 aload_0 iload_2 iaload aload_0 iload_3 iaload iadd iload_1 if_icmpne     114 getstatic new dup invokespecial ldc invokevirtual iload_2 invokevirtual ldc invokevirtual iload_3 invokevirtual ldc invokevirtual aload_0 iload_2 iaload invokevirtual ldc invokevirtual aload_0 iload_3 iaload invokevirtual ldc invokevirtual iload_1 invokevirtual invokevirtual invokevirtual iinc          3, 1 goto          32 iinc          2, 1 goto          22 return  public static void bubblesort(int[]);  getstatic ifne          20 aload_0 ifnonnull     20 new dup ldc invokespecial athrow iconst_1 istore_2 iconst_0 istore_3 iload_3 aload_0 arraylength if_icmpge     152 iload_2 ifeq          152 iconst_0 istore_2 iconst_0 istore        4 iload         4 aload_0 arraylength iload_3 isub iconst_1 isub if_icmpge     146 getstatic ifne          103 iload         4 ifle          70 iload         4 iconst_1 iadd aload_0 arraylength if_icmplt     103 new dup new dup invokespecial ldc invokevirtual iload         4 invokevirtual ldc invokevirtual invokevirtual invokespecial athrow aload_0 iload         4 iaload aload_0 iload         4 iconst_1 iadd iaload if_icmple     140 iconst_1 istore_2 aload_0 iload         4 iconst_1 iadd iaload istore_1 aload_0 iload         4 iconst_1 iadd aload_0 iload         4 iaload iastore aload_0 iload         4 iload_1 iastore iinc          4, 1 goto          39 iinc          3, 1 goto          24 getstatic ifne          173 aload_0 invokestatic ifne          173 new dup invokespecial athrow return  public static void showList(int[]);  iconst_0 istore_1 iload_1 aload_0 arraylength if_icmpge     41 getstatic new dup invokespecial aload_0 iload_1 iaload invokevirtual ldc invokevirtual invokevirtual invokevirtual iinc          1, 1 goto          2 getstatic invokevirtual return  public static boolean isAscending(int[]);  iconst_1 istore_1 iconst_1 istore_2 iload_1 ifeq          61 iload_2 aload_0 arraylength if_icmpge     61 getstatic ifne          38 iload_2 iflt          30 iload_2 aload_0 arraylength if_icmplt     38 new dup invokespecial athrow aload_0 iload_2 iconst_1 isub iaload aload_0 iload_2 iaload if_icmpgt     53 iconst_1 goto          54 iconst_0 istore_1 iinc          2, 1 goto          4 iload_1 ireturn  static {};  ldc invokevirtual ifne          12 iconst_1 goto          13 iconst_0 putstatic return }.
 public class ArrayExamples {	public static void main(String[] args) {	int[] list = {1, 2, 3, 4, 1, 2, 3}; findAndPrintPairs(list, 5); bubblesort(list); showList(list); list = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}; bubblesort(list); showList(list); list = new int[]{11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2}; bubblesort(list); showList(list); list = new int[]{1}; bubblesort(list); showList(list); } public static int findMin(int[] list) {	assert list != null && list.length > 0 : "failed precondition";  int indexOfMin = 0; for(int i = 1; i < list.length; i++) {	if(list[i] < list[indexOfMin]) {	indexOfMin = i; } } return indexOfMin; } public static void badResize(int[] list, int newSize) {	assert list != null && newSize >= 0 : "failed precondition";  int[] temp = new int[newSize]; int limit = Math.min(list.length, newSize);  for(int i = 0; i < limit; i++) {	temp[i] = list[i]; } list = temp; } public static int[] goodResize(int[] list, int newSize) {	assert list != null && newSize >= 0 : "failed precondition";  int[] result = new int[newSize]; int limit = Math.min(list.length, newSize);  for(int i = 0; i < limit; i++) {	result[i] = list[i]; }  return result; } public static void findAndPrintPairs(int[] list, int target) {	assert list != null : "failed precondition";  for(int i = 0; i < list.length; i++) {	for(int j = i + 1; j < list.length; j++) {	if(list[i] + list[j] == target) {	System.out.println("The two elements at indices " + i + " and " + j + " are " + list[i] + " and " + list[j] + " add up to " + target); } } } } public static void bubblesort(int[] list) { assert list != null : "failed precondition";  int temp; boolean changed = true; for(int i = 0; i < list.length && changed; i++) {	changed = false; for(int j = 0; j < list.length - i - 1; j++) {	assert (j > 0) && (j + 1 < list.length) : "loop counter j " + j + "is out of bounds."; if(list[j] > list[j+1]) {	changed = true; temp = list[j + 1]; list[j + 1] = list[j]; list[j] = temp; } } } assert isAscending( list ); } public static void showList(int[] list) {	for(int i = 0; i < list.length; i++) System.out.print( list[i] + " " ); System.out.println(); } public static boolean isAscending( int[] list ) {	boolean ascending = true; int index = 1; while( ascending && index < list.length ) {	assert index >= 0 && index < list.length;  ascending = (list[index - 1] <= list[index]); index++; } return ascending; } }.
 public class AppendFile { public AppendFile();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup invokespecial ldc invokestatic invokevirtual ldc invokevirtual invokevirtual astore_1 ldc astore_2 aload_1 iconst_0 anewarray invokestatic aload_2 invokevirtual iconst_1 anewarray dup iconst_0 getstatic aastore invokestatic pop goto          57 astore_3 return  from    to  target type 27    53    56   Class java/io/IOException }.
 import java.io.IOException; import java.nio.file.Files; import java.nio.file.Paths; import java.nio.file.StandardOpenOption; public class AppendFile { public static void main(String[] args) { String path = System.getProperty("user.dir") + "\\src\\test.txt"; String text = "Added text"; try { Files.write(Paths.get(path), text.getBytes(), StandardOpenOption.APPEND); } catch (IOException e) { } } }.
 public class EnumString { public EnumString();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 aload_1 invokevirtual invokestatic astore_2 getstatic aload_2 invokevirtual return }.
 public class EnumString { public enum TextStyle { BOLD, ITALICS, UNDERLINE, STRIKETHROUGH } public static void main(String[] args) { String style = "Bold"; TextStyle textStyle = TextStyle.valueOf(style.toUpperCase()); System.out.println(textStyle); } }.
 public class ScannerAndKeyboard { public ScannerAndKeyboard();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup getstatic invokespecial astore_1 getstatic ldc invokevirtual aload_1 invokevirtual astore_2 getstatic new dup invokespecial ldc invokevirtual aload_2 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 import java.util.Scanner; public class ScannerAndKeyboard { public static void main(String[] args) {	Scanner s = new Scanner(System.in); System.out.print( "Enter your name: "  ); String name = s.nextLine(); System.out.println( "Hello " + name + "!" ); } }.
 public class StandardDeviation { public StandardDeviation();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        10 newarray       double dup iconst_0 dconst_1 dastore dup iconst_1 ldc2_w dastore dup iconst_2 ldc2_w dastore dup iconst_3 ldc2_w dastore dup iconst_4 ldc2_w dastore dup iconst_5 ldc2_w dastore dup bipush        6 ldc2_w dastore dup bipush        7 ldc2_w dastore dup bipush        8 ldc2_w dastore dup bipush        9 ldc2_w dastore astore_1 aload_1 invokestatic dstore_2 getstatic ldc iconst_1 anewarray dup iconst_0 dload_2 invokestatic aastore invokevirtual pop return  public static double calculateSD(double[]);  dconst_0 dstore_1 dconst_0 dstore_3 aload_0 arraylength istore        5 aload_0 astore        6 aload         6 arraylength istore        7 iconst_0 istore        8 iload         8 iload         7 if_icmpge     44 aload         6 iload         8 daload dstore        9 dload_1 dload         9 dadd dstore_1 iinc          8, 1 goto          19 dload_1 iload         5 i2d ddiv dstore        6 aload_0 astore        8 aload         8 arraylength istore        9 iconst_0 istore        10 iload         10 iload         9 if_icmpge     96 aload         8 iload         10 daload dstore        11 dload_3 dload         11 dload         6 dsub ldc2_w invokestatic dadd dstore_3 iinc          10, 1 goto          62 dload_3 iload         5 i2d ddiv invokestatic dreturn }.
 public class StandardDeviation { public static void main(String[] args) { double[] numArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; double SD = calculateSD(numArray); System.out.format("Standard Deviation = %.6f", SD); } public static double calculateSD(double numArray[]) { double sum = 0.0, standardDeviation = 0.0; int length = numArray.length; for(double num : numArray) { sum += num; } double mean = sum/length; for(double num: numArray) { standardDeviation += Math.pow(num - mean, 2); } return Math.sqrt(standardDeviation/length); } }.
 public class WriteToFile { public WriteToFile();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup new dup ldc invokespecial invokespecial astore_1 new dup invokespecial astore_2 iconst_0 istore        4 iload         4 bipush        100 if_icmpge     49 aload_1 aload_2 invokevirtual invokevirtual iinc          4, 1 goto          28 aload_1 invokevirtual goto          65 astore_1 getstatic ldc invokevirtual return  from    to  target type 0    53    56   Class java/io/IOException }.
 import java.io.PrintStream; import java.io.IOException; import java.io.File; import java.util.Random; public class WriteToFile {	public static void main(String[] args) {	try {	PrintStream writer = new PrintStream( new File("randInts.txt")); Random r = new Random(); final int LIMIT = 100;  for(int i = 0; i < LIMIT; i++) {	writer.println( r.nextInt() ); } writer.close(); } catch(IOException e) {	System.out.println("An error occured while trying to write to the file"); } } }.
 public class URLExpSimple { public URLExpSimple();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup ldc invokespecial astore_1 aload_1 invokevirtual astore_2 new dup new dup aload_2 invokevirtual invokespecial invokespecial astore_3 iconst_0 istore        4 aload_3 invokevirtual ifeq          60 getstatic aload_3 invokevirtual invokevirtual iinc          4, 1 goto          37 getstatic new dup invokespecial ldc invokevirtual iload         4 invokevirtual invokevirtual invokevirtual aload_3 invokevirtual goto          98 astore_1 aload_1 invokevirtual return  from    to  target type 0    90    93   Class java/lang/Exception }.
 import java.io.InputStreamReader; import java.net.URL; import java.net.URLConnection; import java.util.Scanner; public class URLExpSimple { public static void main(String[] args) { try { URL mySite = new URL("http://www.cs.utexas.edu/~scottm"); URLConnection yc = mySite.openConnection(); Scanner in = new Scanner(new InputStreamReader(yc.getInputStream())); int count = 0; while (in.hasNext()) { System.out.println(in.next()); count++; } System.out.println("Number of tokens: " + count); in.close(); } catch (Exception e) { e.printStackTrace(); } } }.
 public class ByteHex { public ByteHex();  aload_0 invokespecial return  public static void main(java.lang.String[]);  iconst_4 newarray       byte dup iconst_0 bipush        10 bastore dup iconst_1 iconst_2 bastore dup iconst_2 bipush        15 bastore dup iconst_3 bipush        11 bastore astore_1 aload_1 astore_2 aload_2 arraylength istore_3 iconst_0 istore        4 iload         4 iload_3 if_icmpge     76 aload_2 iload         4 baload istore        5 ldc iconst_1 anewarray dup iconst_0 iload         5 invokestatic aastore invokestatic astore        6 getstatic aload         6 invokevirtual iinc          4, 1 goto          31 return }.
 public class ByteHex { public static void main(String[] args) { byte[] bytes = {10, 2, 15, 11}; for (byte b : bytes) { String st = String.format("%02X", b); System.out.print(st); } } }.
 public class EnumString { public EnumString();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 aload_1 invokevirtual invokestatic astore_2 getstatic aload_2 invokevirtual return }.
 public class EnumString { public enum TextStyle { BOLD, ITALICS, UNDERLINE, STRIKETHROUGH } public static void main(String[] args) { String style = "Bold"; TextStyle textStyle = TextStyle.valueOf(style.toUpperCase()); System.out.println(textStyle); } }.
 public class MapList { public MapList();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup invokespecial astore_1 aload_1 iconst_1 invokestatic ldc invokeinterface pop aload_1 iconst_2 invokestatic ldc invokeinterface pop aload_1 iconst_3 invokestatic ldc invokeinterface pop aload_1 iconst_4 invokestatic ldc invokeinterface pop aload_1 iconst_5 invokestatic ldc invokeinterface pop aload_1 invokeinterface invokeinterface invokestatic invokeinterface checkcast astore_2 aload_1 invokeinterface invokeinterface invokestatic invokeinterface checkcast astore_3 getstatic new dup invokespecial ldc invokevirtual aload_2 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_3 invokevirtual invokevirtual invokevirtual return }.
 import java.util.*; public class MapList 	{ public static void main(String[] args) { Map<Integer, String> map = new HashMap<>(); map.put(1, "a"); map.put(2, "b"); map.put(3, "c"); map.put(4, "d"); map.put(5, "e"); List<Integer> keyList = new ArrayList(map.keySet()); List<String> valueList = new ArrayList(map.values()); System.out.println("Key List: " + keyList); System.out.println("Value List: " + valueList); } }.
 public class MapList { public MapList();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup invokespecial astore_1 aload_1 iconst_1 invokestatic ldc invokeinterface pop aload_1 iconst_2 invokestatic ldc invokeinterface pop aload_1 iconst_3 invokestatic ldc invokeinterface pop aload_1 iconst_4 invokestatic ldc invokeinterface pop aload_1 iconst_5 invokestatic ldc invokeinterface pop aload_1 invokeinterface invokeinterface invokestatic invokeinterface checkcast astore_2 aload_1 invokeinterface invokeinterface invokestatic invokeinterface checkcast astore_3 getstatic new dup invokespecial ldc invokevirtual aload_2 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_3 invokevirtual invokevirtual invokevirtual return }.
 import java.util.*; import java.util.stream.Collectors; public class MapList 	{ public static void main(String[] args) { Map<Integer, String> map = new HashMap<>(); map.put(1, "a"); map.put(2, "b"); map.put(3, "c"); map.put(4, "d"); map.put(5, "e"); List<Integer> keyList = map.keySet().stream().collect(Collectors.toList()); List<String> valueList = map.values().stream().collect(Collectors.toList()); System.out.println("Key List: " + keyList); System.out.println("Value List: " + valueList); } }.
 public class Decimal { public Decimal();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc2_w dstore_1 new dup ldc invokespecial astore_3 aload_3 getstatic invokevirtual getstatic aload_3 dload_1 invokevirtual invokevirtual return }.
 public class Decimal { public static void main(String[] args) { double num = 1.34567; System.out.format("%.4f", num); } }.
 public class Die { public static final int DEFAULT_SIDES;  static final boolean $assertionsDisabled;  public Die();  aload_0 bipush        6 invokespecial return  public Die(int);  aload_0 invokespecial getstatic ifne          47 iload_1 iconst_1 if_icmpgt     47 new dup new dup invokespecial ldc invokevirtual iload_1 invokevirtual ldc invokevirtual invokevirtual invokespecial athrow aload_0 iload_1 putfield aload_0 iconst_1 putfield getstatic ifne          87 aload_0 invokevirtual iconst_1 if_icmpne     79 aload_0 invokevirtual iload_1 if_icmpeq     87 new dup invokespecial athrow return  public Die(int, int);  aload_0 invokespecial getstatic ifne          35 iload_1 iconst_1 if_icmple     25 iconst_1 iload_2 if_icmpgt     25 iload_2 iload_1 if_icmple     35 new dup ldc invokespecial athrow aload_0 iload_1 putfield aload_0 iload_2 putfield return  public int roll();  aload_0 getstatic aload_0 getfield invokevirtual iconst_1 iadd putfield getstatic ifne          49 iconst_1 aload_0 invokevirtual if_icmpgt     41 aload_0 invokevirtual aload_0 invokevirtual if_icmple     49 new dup invokespecial athrow aload_0 getfield ireturn  public int getNumSides();  aload_0 getfield ireturn  public int getResult();  aload_0 getfield ireturn  public boolean equals(java.lang.Object);  iconst_1 istore_2 aload_1 ifnonnull     11 iconst_0 istore_2 goto          70 aload_0 aload_1 if_acmpne     21 iconst_1 istore_2 goto          70 aload_0 invokevirtual aload_1 invokevirtual if_acmpeq     37 iconst_0 istore_2 goto          70 aload_1 checkcast astore_3 aload_0 getfield aload_3 getfield if_icmpne     68 aload_0 getfield aload_3 getfield if_icmpne     68 iconst_1 goto          69 iconst_0 istore_2 iload_2 ireturn  public java.lang.String toString();  new dup invokespecial ldc invokevirtual aload_0 invokevirtual invokevirtual ldc invokevirtual aload_0 invokevirtual invokevirtual invokevirtual areturn  static {};  ldc invokevirtual ifne          12 iconst_1 goto          13 iconst_0 putstatic new dup invokespecial putstatic return }.
 import java.util.Random; public class Die {   public static final int DEFAULT_SIDES = 6; private static Random ourRandNumGen = new Random(); private final int iMyNumSides; private int iMyResult; public Die() {   this(DEFAULT_SIDES); } public Die(int numSides) {   assert numSides > 1 : "Violation of precondition: numSides = " + numSides + "numSides must be greater than 1"; iMyNumSides = numSides; iMyResult = 1; assert getResult() == 1 && getNumSides() == numSides; } public Die(int numSides, int result) {   assert numSides > 1 && 1 <= result && result <= numSides : "Violation of precondition";  iMyNumSides = numSides; iMyResult = result; } public int roll() {   iMyResult = ourRandNumGen.nextInt(iMyNumSides) + 1; assert ( 1 <= getResult() ) && ( getResult() <= getNumSides() ); return iMyResult; } public int getNumSides() {   return iMyNumSides; } public int getResult() {   return iMyResult;   } public boolean equals(Object otherObj) {   boolean result = true; if(otherObj == null) result = false; else if(this == otherObj) result = true; else if(this.getClass() != otherObj.getClass()) result = false; else {   Die otherDie = (Die)otherObj; result = this.iMyResult == otherDie.iMyResult && this.iMyNumSides == otherDie.iMyNumSides; } return result; } public String toString() {   return "Num sides " + getNumSides() + " result " + getResult(); } }.
 public class Decimal { public Decimal();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc2_w dstore_1 getstatic ldc iconst_1 anewarray dup iconst_0 dload_1 invokestatic aastore invokevirtual pop return }.
 import java.math.RoundingMode; import java.text.DecimalFormat; public class Decimal	{ public static void main(String[] args) { double num = 1.34567; DecimalFormat df = new DecimalFormat("#.###"); df.setRoundingMode(RoundingMode.CEILING); System.out.println(df.format(num)); } }.
 public class Stopwatch { public static final double NANOS_PER_SEC;  public Stopwatch();  aload_0 invokespecial return  public void start();  aload_0 invokestatic putfield return  public void stop();  aload_0 invokestatic putfield return  public double time();  aload_0 getfield aload_0 getfield lsub l2d ldc2_w ddiv dreturn  public java.lang.String toString();  new dup invokespecial ldc invokevirtual aload_0 invokevirtual invokevirtual ldc invokevirtual invokevirtual areturn  public long timeInNanoseconds();  aload_0 getfield aload_0 getfield lsub lreturn }.
 public class Stopwatch { private long startTime; private long stopTime; public static final double NANOS_PER_SEC = 1000000000.0; public void start(){ startTime = System.nanoTime(); } public void stop() {	stopTime = System.nanoTime();	} public double time() {	return (stopTime - startTime) / NANOS_PER_SEC;	}  public String toString(){ return "elapsed time: " + time() + " seconds."; } public long timeInNanoseconds() {	return (stopTime - startTime);	} }.
 public class CreateASet { static final boolean $assertionsDisabled;  public CreateASet();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        6 anewarray dup iconst_0 ldc aastore dup iconst_1 ldc aastore dup iconst_2 ldc aastore dup iconst_3 ldc aastore dup iconst_4 ldc aastore dup iconst_5 ldc aastore astore_1 getstatic new dup invokespecial ldc invokevirtual aload_1 invokestatic invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_1 invokestatic invokestatic invokevirtual invokevirtual invokevirtual iconst_4 anewarray dup iconst_0 new dup invokespecial aastore dup iconst_1 new dup invokespecial aastore dup iconst_2 new dup iconst_0 iconst_1 iconst_2 iconst_3 invokespecial aastore dup iconst_3 new dup iconst_0 iconst_1 iconst_2 iconst_3 invokespecial aastore astore_2 getstatic new dup invokespecial ldc invokevirtual aload_2 invokestatic invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_2 invokestatic invokestatic invokevirtual invokevirtual invokevirtual bipush        9 anewarray dup iconst_0 ldc aastore dup iconst_1 ldc aastore dup iconst_2 ldc aastore dup iconst_3 ldc aastore dup iconst_4 new dup invokespecial aastore dup iconst_5 new dup invokespecial aastore dup bipush        6 ldc aastore dup bipush        7 new dup iconst_0 iconst_1 iconst_2 iconst_3 invokespecial aastore dup bipush        8 ldc aastore astore_3 getstatic new dup invokespecial ldc invokevirtual aload_3 invokestatic invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_3 invokestatic invokestatic invokevirtual invokevirtual invokevirtual return  public static java.lang.Object[] makeSet(java.lang.Object[]);  getstatic ifne          20 aload_0 ifnonnull     20 new dup ldc invokespecial athrow getstatic ifne          43 aload_0 invokestatic ifne          43 new dup ldc invokespecial athrow aload_0 arraylength anewarray astore_1 iconst_0 istore_2 iconst_0 istore        5 iload         5 aload_0 arraylength if_icmpge     114 iconst_0 istore        4 iconst_0 istore_3 iload_3 ifne          94 iload         4 iload_2 if_icmpge     94 aload_0 iload         5 aaload aload_1 iload         4 aaload invokevirtual istore_3 iinc          4, 1 goto          66 iload_3 ifne          108 aload_1 iload_2 aload_0 iload         5 aaload aastore iinc          2, 1 iinc          5, 1 goto          54 iload_2 anewarray astore        5 aload_1 iconst_0 aload         5 iconst_0 iload_2 invokestatic aload         5 areturn  static {};  ldc invokevirtual ifne          12 iconst_1 goto          13 iconst_0 putstatic return }.
 import java.util.Arrays; import java.awt.Rectangle; public class CreateASet { public static void main(String[] args){ String[] words = {"A", "B", "B", "D", "C", "A"}; System.out.println( "original: " + Arrays.toString(words)); System.out.println( "as a set: " + Arrays.toString(makeSet(words))); Rectangle[] rectList = {new Rectangle(), new Rectangle(), new Rectangle(0, 1, 2, 3), new Rectangle(0, 1, 2, 3)}; System.out.println( "original: " + Arrays.toString(rectList)); System.out.println( "as a set: " + Arrays.toString(makeSet(rectList))); Object[] mixed = {"A", "C", "A", "B", new Rectangle(), new Rectangle(), "A", new Rectangle(0, 1, 2, 3), "D"}; System.out.println( "original: " + Arrays.toString(mixed)); System.out.println( "as a set: " + Arrays.toString(makeSet(mixed))); } public static Object[] makeSet(Object[] data){ assert data != null : "Failed precondition makeSet. parameter cannot be null"; assert noNulls(data) : "Failed precondition makeSet. no elements of parameter can be null"; Object[] result = new Object[data.length]; int numUnique = 0; boolean found; int indexInResult; for(int i = 0; i < data.length; i++){ indexInResult = 0; found = false; while(!found && indexInResult < numUnique){ found = data[i].equals(result[indexInResult]); indexInResult++; } if( ! found ){ result[numUnique] = data[i]; numUnique++; } } Object[] result2 = new Object[numUnique]; System.arraycopy(result, 0, result2, 0, numUnique); return result2; } private static boolean noNulls(Object[] data){ assert data != null : "Failed precondition makeSet. parameter cannot be null"; boolean good = true; int i = 0; while( good && i < data.length ){ good = data[i] != null; i++; } return good; } }.
 public class Null { public Null();  aload_0 invokespecial return  public static void main(java.lang.String[]);  aconst_null astore_1 ldc astore_2 aload_1 invokestatic ifeq          23 getstatic ldc invokevirtual goto          31 getstatic ldc invokevirtual aload_2 invokestatic ifeq          49 getstatic ldc invokevirtual goto          57 getstatic ldc invokevirtual return  public static boolean isNullOrEmpty(java.lang.String);  aload_0 ifnull        13 aload_0 invokevirtual ifne          13 iconst_0 ireturn iconst_1 ireturn }.
 public class Null { public static void main(String[] args) { String str1 = null; String str2 = ""; if(isNullOrEmpty(str1)) System.out.println("First string is null or empty."); else System.out.println("First string is not null or empty."); if(isNullOrEmpty(str2)) System.out.println("Second string is null or empty."); else System.out.println("Second string is not null or empty."); } public static boolean isNullOrEmpty(String str) { if(str != null && !str.isEmpty()) return false; return true; } }.
 public class Milliseconds { public Milliseconds();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc2_w lstore_1 getstatic lload_1 invokevirtual lstore_3 getstatic lload_1 invokevirtual lstore        5 getstatic ldc iconst_2 anewarray dup iconst_0 lload_1 invokestatic aastore dup iconst_1 lload_3 invokestatic aastore invokevirtual pop getstatic ldc invokevirtual getstatic ldc iconst_2 anewarray dup iconst_0 lload_1 invokestatic aastore dup iconst_1 lload         5 invokestatic aastore invokevirtual pop return }.
 import java.util.concurrent.TimeUnit; public class Milliseconds { public static void main(String[] args) { long milliseconds = 1000000; long minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds); long seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds); System.out.format("%d Milliseconds = %d minutes\n", milliseconds, minutes ); System.out.println("Or"); System.out.format("%d Milliseconds = %d seconds", milliseconds, seconds ); } }.
 public class MineSweeper { public MineSweeper();  aload_0 invokespecial return  public void cellPicked(int, int);  aload_0 iload_1 iload_2 invokevirtual ifeq          79 aload_0 getfield iload_1 aaload iload_2 baload ifne          79 aload_0 getfield iload_1 aaload iload_2 iconst_1 bastore aload_0 getfield iload_1 aaload iload_2 iaload ifne          79 iconst_m1 istore_3 iload_3 iconst_1 if_icmpgt     79 iconst_m1 istore        4 iload         4 iconst_1 if_icmpgt     73 aload_0 iload_1 iload_3 iadd iload_2 iload         4 iadd invokevirtual iinc          4, 1 goto          50 iinc          3, 1 goto          42 return  public boolean inBounds(int, int);  iconst_0 iload_1 if_icmpgt     34 iload_1 aload_0 getfield arraylength if_icmpge     34 iconst_0 iload_2 if_icmpgt     34 iload_2 aload_0 getfield iconst_0 aaload arraylength if_icmpge     34 iconst_1 goto          35 iconst_0 ireturn }.
 public class MineSweeper {	private int[][] myTruth; private boolean[][] myShow; public void cellPicked(int row, int col) {	if( inBounds(row, col) && !myShow[row][col] ) {	myShow[row][col] = true;  if( myTruth[row][col] == 0) {	for(int r = -1; r <= 1; r++) for(int c = -1; c <= 1; c++) cellPicked(row + r, col + c); } } } public boolean inBounds(int row, int col) {	return 0 <= row && row < myTruth.length && 0 <= col && col < myTruth[0].length; } }.
 public class ListNode { public ListNode();  aload_0 aconst_null aconst_null invokespecial return  public ListNode(java.lang.Object, ListNode);  aload_0 invokespecial aload_0 aload_1 putfield aload_0 aload_2 putfield return  public java.lang.Object getData();  aload_0 getfield areturn  public ListNode getNext();  aload_0 getfield areturn  public void setData(java.lang.Object);  aload_0 aload_1 putfield return  public void setNext(ListNode);  aload_0 aload_1 putfield return }.
 public class ListNode { private Object myData; private ListNode myNext; public ListNode() {	this(null, null); } public ListNode(Object data, ListNode next) {	myData = data; myNext = next; } public Object getData() {	return myData;	} public ListNode getNext() {	return myNext;	} public void setData(Object data) {	myData = data;	} public void setNext(ListNode next) {	myNext = next;	} }.
 public class JoinLists { public JoinLists();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup invokespecial astore_1 aload_1 ldc invokeinterface pop new dup invokespecial astore_2 aload_2 ldc invokeinterface pop new dup invokespecial astore_3 aload_3 aload_1 invokeinterface pop aload_3 aload_2 invokeinterface pop getstatic new dup invokespecial ldc invokevirtual aload_1 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_2 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual aload_3 invokevirtual invokevirtual invokevirtual return }.
 import java.util.ArrayList; import java.util.List; public class JoinLists		{ public static void main(String[] args) { List<String> list1 = new ArrayList<String>(); list1.add("a"); List<String> list2 = new ArrayList<String>(); list2.add("b"); List<String> joined = new ArrayList<String>(); joined.addAll(list1); joined.addAll(list2); System.out.println("list1: " + list1); System.out.println("list2: " + list2); System.out.println("joined: " + joined); } }.
 public class AddNumbers { public AddNumbers();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        20 istore_1 iload_1 invokestatic istore_2 getstatic new dup invokespecial ldc invokevirtual iload_2 invokevirtual invokevirtual invokevirtual return  public static int addNumbers(int);  iload_0 ifeq          13 iload_0 iload_0 iconst_1 isub invokestatic iadd ireturn iload_0 ireturn }.
 public class AddNumbers { public static void main(String[] args) { int number = 20; int sum = addNumbers(number); System.out.println("Sum = " + sum); } public static int addNumbers(int num) { if (num != 0) return num + addNumbers(num - 1); else return num; } }.
 public class SimpleWordCounter { public SimpleWordCounter();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup ldc invokespecial astore_1 new dup aload_1 invokespecial astore_2 new dup invokespecial astore_3 aload_2 invokevirtual ifeq          98 aload_2 invokevirtual astore        4 aload_3 aload         4 invokeinterface ifne          67 aload_3 aload         4 iconst_1 invokestatic invokeinterface pop goto          95 aload_3 aload         4 aload_3 aload         4 invokeinterface checkcast invokevirtual iconst_1 iadd invokestatic invokeinterface pop goto          27 aload_3 invokeinterface invokeinterface astore        4 aload         4 invokeinterface ifeq          173 aload         4 invokeinterface checkcast astore        5 getstatic new dup invokespecial aload         5 invokevirtual ldc invokevirtual aload_3 aload         5 invokeinterface invokevirtual invokevirtual invokevirtual goto          111 getstatic aload_3 invokeinterface invokevirtual goto          197 astore_1 getstatic ldc invokevirtual return  from    to  target type 0   185   188   Class java/io/IOException }.
  import java.io.File; import java.io.IOException; import java.util.Map; import java.util.Scanner; import java.util.TreeMap; public class SimpleWordCounter { public static void main(String[] args) { try { File f = new File("ciaFactBook2008.txt"); Scanner sc; sc = new Scanner(f); Map<String, Integer> wordCount = new TreeMap<String, Integer>(); while(sc.hasNext()) { String word = sc.next(); if(!wordCount.containsKey(word)) wordCount.put(word, 1); else wordCount.put(word, wordCount.get(word) + 1); } for(String word : wordCount.keySet()) System.out.println(word + " " + wordCount.get(word)); System.out.println(wordCount.size()); } catch(IOException e) { System.out.println("Unable to read from file."); } } }.
 public class HelloWorld { public HelloWorld();  aload_0 invokespecial return  public static void main(java.lang.String[]);  getstatic ldc invokevirtual return }.
 import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner reader = new Scanner(System.in); System.out.print("Enter a number: "); int number = reader.nextInt(); System.out.println("You entered: " + number); } }.
 public class Reverse { public Reverse();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc astore_1 aload_1 invokestatic astore_2 getstatic new dup invokespecial ldc invokevirtual aload_2 invokevirtual invokevirtual invokevirtual return  public static java.lang.String reverse(java.lang.String);  aload_0 invokevirtual ifeq          9 aload_0 areturn new dup invokespecial aload_0 iconst_1 invokevirtual invokestatic invokevirtual aload_0 iconst_0 invokevirtual invokevirtual invokevirtual areturn }.
 public class Reverse { public static void main(String[] args) { String sentence = "Go work"; String reversed = reverse(sentence); System.out.println("The reversed sentence is: " + reversed); } public static String reverse(String sentence) { if (sentence.isEmpty()) return sentence; return reverse(sentence.substring(1)) + sentence.charAt(0); } }.
 public class ReverseNumber { public ReverseNumber();  aload_0 invokespecial return  public static void main(java.lang.String[]);  sipush        1234 istore_1 iconst_0 istore_2 iload_1 ifeq          30 iload_1 bipush        10 irem istore_3 iload_2 bipush        10 imul iload_3 iadd istore_2 iload_1 bipush        10 idiv istore_1 goto          6 getstatic new dup invokespecial ldc invokevirtual iload_2 invokevirtual invokevirtual invokevirtual return }.
 public class ReverseNumber { public static void main(String[] args) { int num = 1234, reversed = 0; while(num != 0) { int digit = num % 10; reversed = reversed * 10 + digit; num /= 10; } System.out.println("Reversed Number: " + reversed); } }.
 public class MultiplyTwoNumbers { public MultiplyTwoNumbers();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc fstore_1 fconst_2 fstore_2 fload_1 fload_2 fmul fstore_3 getstatic new dup invokespecial ldc invokevirtual fload_3 invokevirtual invokevirtual invokevirtual return }.
 public class MultiplyTwoNumbers { public static void main(String[] args) { float first = 1.5f; float second = 2.0f; float product = first * second; System.out.println("The product is: " + product); } }.
 public class AsciiValue { public AsciiValue();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        97 istore_1 iload_1 istore_2 iload_1 istore_3 getstatic new dup invokespecial ldc invokevirtual iload_1 invokevirtual ldc invokevirtual iload_2 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual iload_1 invokevirtual ldc invokevirtual iload_3 invokevirtual invokevirtual invokevirtual return }.
 public class AsciiValue { public static void main(String[] args) { char ch = 'a'; int ascii = ch; int castAscii = (int) ch; System.out.println("The ASCII value of " + ch + " is: " + ascii); System.out.println("The ASCII value of " + ch + " is: " + castAscii); } }.
 public class QuotientRemainder { public QuotientRemainder();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        25 istore_1 iconst_4 istore_2 iload_1 iload_2 idiv istore_3 iload_1 iload_2 irem istore        4 getstatic new dup invokespecial ldc invokevirtual iload_3 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual iload         4 invokevirtual invokevirtual invokevirtual return }.
 public class QuotientRemainder { public static void main(String[] args) { int dividend = 25, divisor = 4; int quotient = dividend / divisor; int remainder = dividend % divisor; System.out.println("Quotient = " + quotient); System.out.println("Remainder = " + remainder); } }.
 public class SwapNumbers { public SwapNumbers();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc fstore_1 ldc fstore_2 getstatic ldc invokevirtual getstatic new dup invokespecial ldc invokevirtual fload_1 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual fload_2 invokevirtual invokevirtual invokevirtual fload_1 fstore_3 fload_2 fstore_1 fload_3 fstore_2 getstatic ldc invokevirtual getstatic new dup invokespecial ldc invokevirtual fload_1 invokevirtual invokevirtual invokevirtual getstatic new dup invokespecial ldc invokevirtual fload_2 invokevirtual invokevirtual invokevirtual return }.
 public class SwapNumbers { public static void main(String[] args) { float first = 1.20f, second = 2.45f; System.out.println("--Before swap--"); System.out.println("First number = " + first); System.out.println("Second number = " + second); float temporary = first; first = second; second = temporary; System.out.println("--After swap--"); System.out.println("First number = " + first); System.out.println("Second number = " + second); } }.
 public class EvenOdd { public EvenOdd();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup getstatic invokespecial astore_1 getstatic ldc invokevirtual aload_1 invokevirtual istore_2 iload_2 iconst_2 irem ifne          58 getstatic new dup invokespecial iload_2 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          83 getstatic new dup invokespecial iload_2 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 import java.util.Scanner; public class EvenOdd { public static void main(String[] args) { Scanner reader = new Scanner(System.in); System.out.print("Enter a number: "); int num = reader.nextInt(); if(num % 2 == 0) System.out.println(num + " is even"); else System.out.println(num + " is odd"); } }.
 public class PositiveNegative { public PositiveNegative();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc2_w dstore_1 dload_1 dconst_0 dcmpg ifge          38 getstatic new dup invokespecial dload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          97 dload_1 dconst_0 dcmpl ifle          72 getstatic new dup invokespecial dload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          97 getstatic new dup invokespecial dload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 public class PositiveNegative { public static void main(String[] args) { double number = 12.3; if (number < 0.0) System.out.println(number + " is a negative number."); else if ( number > 0.0) System.out.println(number + " is a positive number."); else System.out.println(number + " is 0."); } }.
 public class Alphabet { public Alphabet();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        42 istore_1 iload_1 bipush        97 if_icmplt     15 iload_1 bipush        122 if_icmple     27 iload_1 bipush        65 if_icmplt     55 iload_1 bipush        90 if_icmpgt     55 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          80 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 public class Alphabet { public static void main(String[] args) { char c = '*'; if( (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) System.out.println(c + " is an alphabet."); else System.out.println(c + " is not an alphabet."); } }.
 public class SumNatural { public SumNatural();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        100 istore_1 iconst_0 istore_2 iconst_1 istore_3 iload_3 iload_1 if_icmpgt     22 iload_2 iload_3 iadd istore_2 iinc          3, 1 goto          7 getstatic new dup invokespecial ldc invokevirtual iload_2 invokevirtual invokevirtual invokevirtual return }.
 public class SumNatural { public static void main(String[] args) { int num = 100, sum = 0; for(int i = 1; i <= num; ++i) { sum += i; } System.out.println("Sum = " + sum); } }.
 public class GCD { public GCD();  aload_0 invokespecial return  public static void main(java.lang.String[]);  bipush        81 istore_1 sipush        153 istore_2 iconst_1 istore_3 iconst_1 istore        4 iload         4 iload_1 if_icmpgt     47 iload         4 iload_2 if_icmpgt     47 iload_1 iload         4 irem ifne          41 iload_2 iload         4 irem ifne          41 iload         4 istore_3 iinc          4, 1 goto          12 getstatic ldc iconst_3 anewarray dup iconst_0 iload_1 invokestatic aastore dup iconst_1 iload_2 invokestatic aastore dup iconst_2 iload_3 invokestatic aastore invokevirtual pop return }.
 public class GCD { public static void main(String[] args) { int n1 = 81, n2 = 153, gcd = 1; for(int i = 1; i <= n1 && i <= n2; ++i) { if(n1 % i==0 && n2 % i==0) gcd = i; } System.out.printf("G.C.D of %d and %d is %d", n1, n2, gcd); } }.
 public class Armstrong { public Armstrong();  aload_0 invokespecial return  public static void main(java.lang.String[]);  sipush        371 istore_1 iconst_0 istore        4 iload_1 istore_2 iload_2 ifeq          41 iload_2 bipush        10 irem istore_3 iload         4 i2d iload_3 i2d ldc2_w invokestatic dadd d2i istore        4 iload_2 bipush        10 idiv istore_2 goto          9 iload         4 iload_1 if_icmpne     75 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual goto          100 getstatic new dup invokespecial iload_1 invokevirtual ldc invokevirtual invokevirtual invokevirtual return }.
 public class Armstrong { public static void main(String[] args) { int number = 371, originalNumber, remainder, result = 0; originalNumber = number; while (originalNumber != 0) { remainder = originalNumber % 10; result += Math.pow(remainder, 3); originalNumber /= 10; } if(result == number) System.out.println(number + " is an Armstrong number."); else System.out.println(number + " is not an Armstrong number."); } }.
 public class Calculator { public Calculator();  aload_0 invokespecial return  public static void main(java.lang.String[]);  new dup getstatic invokespecial astore_1 getstatic ldc invokevirtual aload_1 invokevirtual dstore_2 aload_1 invokevirtual dstore        4 getstatic ldc invokevirtual aload_1 invokevirtual iconst_0 invokevirtual istore        6 iload         6 tableswitch   { // 42 to 47 106 88 124 97 124 115 124 } dload_2 dload         4 dadd dstore        7 goto          138 dload_2 dload         4 dsub dstore        7 goto          138 dload_2 dload         4 dmul dstore        7 goto          138 dload_2 dload         4 ddiv dstore        7 goto          138 getstatic ldc iconst_0 anewarray invokevirtual pop return getstatic ldc iconst_4 anewarray dup iconst_0 dload_2 invokestatic aastore dup iconst_1 iload         6 invokestatic aastore dup iconst_2 dload         4 invokestatic aastore dup iconst_3 dload         7 invokestatic aastore invokevirtual pop return }.
 import java.util.Scanner; public class Calculator { public static void main(String[] args) { Scanner reader = new Scanner(System.in); System.out.print("Enter two numbers: "); double first = reader.nextDouble(); double second = reader.nextDouble(); System.out.print("Enter an operator (+, -, *, /): "); char operator = reader.next().charAt(0); double result; switch(operator) { case '+': result = first + second; break; case '-': result = first - second; break; case '*': result = first * second; break; case '/': result = first / second; break; default: System.out.printf("Error! operator is not correct"); return; } System.out.printf("%.1f %c %.1f = %.1f", first, operator, second, result); } }.
 public class BinaryDecimal { public BinaryDecimal();  aload_0 invokespecial return  public static void main(java.lang.String[]);  ldc2_w lstore_1 lload_1 invokestatic istore_3 getstatic ldc iconst_2 anewarray dup iconst_0 lload_1 invokestatic aastore dup iconst_1 iload_3 invokestatic aastore invokevirtual pop return  public static int convertBinaryToDecimal(long);  iconst_0 istore_2 iconst_0 istore_3 lload_0 lconst_0 lcmp ifeq          46 lload_0 ldc2_w lrem lstore        4 lload_0 ldc2_w ldiv lstore_0 iload_2 i2d lload         4 l2d ldc2_w iload_3 i2d invokestatic dmul dadd d2i istore_2 iinc          3, 1 goto          4 iload_2 ireturn }.
 public class BinaryDecimal { public static void main(String[] args) { long num = 110110111; int decimal = convertBinaryToDecimal(num); System.out.printf("%d in binary = %d in decimal", num, decimal); } public static int convertBinaryToDecimal(long num) { int decimalNumber = 0, i = 0; long remainder; while (num != 0) { remainder = num % 10; num /= 10; decimalNumber += remainder * Math.pow(2, i); ++i; } return decimalNumber; } }.
 public class CurrentDateTime { public CurrentDateTime();  aload_0 invokespecial return  public static void main(java.lang.String[]);  invokestatic astore_1 getstatic new dup invokespecial ldc invokevirtual aload_1 invokevirtual invokevirtual invokevirtual return }.
 import java.time.LocalDateTime; public class CurrentDateTime { public static void main(String[] args) { LocalDateTime current = LocalDateTime.now(); System.out.println("Current Date and Time is: " + current); } }.